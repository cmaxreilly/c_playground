!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFSIZE	include/char_handling.h	/^#define BUFSIZE /;"	d
CHAR_HANDLING_H	include/char_handling.h	/^#define CHAR_HANDLING_H$/;"	d
MAXOP	docs/control_flow.c	/^#define MAXOP /;"	d	file:
MAXOP	include/char_handling.h	/^#define MAXOP /;"	d
MAXVAL	include/char_handling.h	/^#define MAXVAL /;"	d
MAX_STACK	include/stack.h	/^#define MAX_STACK /;"	d
NUMBER	include/char_handling.h	/^#define NUMBER /;"	d
PRECEDENCE_H	include/precedence.h	/^#define PRECEDENCE_H$/;"	d
STACK_H	include/stack.h	/^#define STACK_H$/;"	d
TEST	src/main.c	/^#define TEST /;"	d	file:
TEST_STACK_H	include/test.h	/^#define TEST_STACK_H$/;"	d
buf	src/char_handling.c	/^char buf[BUFSIZE];  \/* buffer for ungetch *\/$/;"	v
bufp	src/char_handling.c	/^int bufp = 0;$/;"	v
getch	src/char_handling.c	/^getch(void) \/* get a (possibly pushed back) character *\/$/;"	f
getop	src/char_handling.c	/^getop(char s[])$/;"	f
main	dev/main.c	/^main(void)$/;"	f
main	docs/control_flow.c	/^main(void)$/;"	f
main	src/main.c	/^main(void)$/;"	f
op_precedence	src/precedence.c	/^op_precedence(char op)$/;"	f
pop	src/char_handling.c	/^double pop(void)$/;"	f
pop_char	src/stack.c	/^pop_char(char stack[], int* top)$/;"	f
pop_double	src/stack.c	/^pop_double(double stack[], int* top)$/;"	f
print_char_stack	src/stack.c	/^print_char_stack(char stack[], int top)$/;"	f
print_double_stack	src/stack.c	/^print_double_stack(double stack[], int top)$/;"	f
push	src/char_handling.c	/^void push(double f)$/;"	f
push_char	src/stack.c	/^push_char(char stack[], char data, int* top)$/;"	f
push_double	src/stack.c	/^push_double(double stack[], double data, int* top)$/;"	f
sp	src/char_handling.c	/^int sp = 0;         \/* next free stack position *\/$/;"	v
test_stack	src/test.c	/^test_stack(void)$/;"	f
test_tree	src/test.c	/^test_tree(void)$/;"	f
ungetch	src/char_handling.c	/^ungetch(int c)  \/* push character back on input *\/$/;"	f
val	src/char_handling.c	/^double val[MAXVAL]; \/* value stack *\/$/;"	v
