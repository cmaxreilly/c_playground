Algorithm to solve Infix expressions

Required data structures:
    Operand Stack
    Operator Stack

Algorithm

Until the end of the expression is reached, get one character and perform only 
one of the steps (1) through (5):
    1. If the character is an operand, push it onto the operand stack.
    2. If the characters is "(", then push it onto the operator stack. 
    3. If the characters is ")", then "process as explained above until the 
    corresponding "(" is encounterd in the operator stack. At this stage, POP
        the operator stack and ignore "(".
    4. If we encounter an operator:
        * If the operator stack is empty, then push the operator onto the operator
        stack
        * If the operator stack is not empty and the operator's precedence is 
        greater than the precedence of the stack top of the operator stack, then
        push the character onto the operator stack.
        * If the operator stack is not empty and the character's precedence is
        lower than the precedence of the stack top of operator stack, then we
        pop the opearator with high precedence, and two valued from the value stack,
        apply the operator to the values and store the result in the value
        stack. And, push the current iterated operator in the operator stack. 
    5. Once we have iterated the entire expression, we pop one operator from the
    operator stack and two values from the value operator and apply the
    operator to the values, store the result in the avlue stack, and keep on
    repeating this, until we have just a single value left in the value stack.
    6. the last value in the value stack will be the result.


Things I need to figure out
    * How to create a precedence tree.



Things I need to implement
    * A function that pops things from a given stack.
    * A function that pushes things to a given stack.
    * A function that shows the top of a given stack.
    * Algorithm implementation in driver code
    * Compile header files

Things I have implemented


